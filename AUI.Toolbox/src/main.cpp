#include <filesystem>
#include <functional>
#include <iostream>


#include "AUI/Common/AString.h"
#include "AUI/Common/AStringVector.h"
#include "AUI/Common/ByteBuffer.h"
#include "AUI/Common/AMap.h"
#include "AUI/IO/FileInputStream.h"
#include "AUI/IO/FileOutputStream.h"
#include "AUI/Util/BuiltinFiles.h"
#include "AUI/Util/LZ.h"

void printHelp()
{
	std::cout << "Available commands:" << std::endl
		<< "\tpack <dir> <dst>\t\tpack a dir into the .h file";
	exit(-1);
}

int main(int argc, char** argv)
{	
	std::cout << "Alex2772 Universal Interface toolbox" << std::endl;
	if (argc <= 1)
	{
		printHelp();
	}
	else
	{
		AStringVector args;
		for (int i = 2; i < argc; ++i)
		{
			args << argv[i];
		}

		AMap<AString, std::function<void()>> commands = {
			{
				"pack", [&]()
				{
					if (args.size() != 2)
					{
						printHelp();
					}
					else
					{
						
						try
						{
							ByteBuffer buffer;
							for (auto& entry : std::filesystem::recursive_directory_iterator(args[0].toStdString()))
							{
								if (entry.is_regular_file()) {
									try
									{
										AString filePath = AString::path(entry.path());
										filePath = filePath.mid(args[0].length() + 1);
										filePath = filePath.replaceAll("\\", '/');

										buffer << filePath.toStdString();
										auto fis = _new<FileInputStream>(AString::path(entry.path()));

										ByteBuffer data;

										char buf[4096];
										for (int r; (r = fis->read(buf, sizeof(buf))) > 0;)
										{
											data.put(buf, r);
										}
										buffer << uint32_t(data.getSize());
										buffer << data;
										std::cout << ": packed " << filePath << std::endl;
									}
									catch (...)
									{
										std::cout << "Warning: could not read file " << entry.path() << std::endl;
									}
								}
							}

							try {
                                ByteBuffer packed;
                                LZ::compress(buffer, packed);

                                std::filesystem::create_directories(std::filesystem::path(args[1].toStdString()).parent_path());

                                AString name(
                                        std::filesystem::path(args[1].toStdString()).filename().wstring());

                                auto dotPos = name.rfind(L'.');
                                if (dotPos != AString::NPOS) {
                                    name = name.mid(0, dotPos - 1);
                                }

                                auto out = _new<FileOutputStream>(args[1]);
                                *out << AString(
                                        "// This file is autogenerated by AUI.Toolkit. Please do not modify.\n");
                                *out << AString(
                                        "\n"
                                        "#include \"AUI/Common/ByteBuffer.h\"\n"
                                        "#include \"AUI/Util/BuiltinFiles.h\"\n");
                                *out << AString("const static unsigned char AUI_PACKED_asset") << AString("[] = {");
                                for (uint8_t c : packed) {
                                    char buf[32];
                                    sprintf(buf, "0x%02x,", c);
                                    *out << AString(buf);
                                }
                                *out << AString("};\n");

                                *out << AString("struct Assets {\n\tAssets(){\n"
                                                "\t\tBuiltinFiles::load(AUI_PACKED_asset, sizeof(AUI_PACKED_asset));\n\t}\n};\n"
                                                "static Assets a;");

                                std::cout << args[0] << " -> " << std::filesystem::absolute(args[1].toStdString())
                                          << std::endl;
                            } catch (...) {
                                std::cout << "Could not write result to " << std::filesystem::absolute(args[1].toStdString()) << std::endl;
                                exit(-1);
                            }
						}
						catch (...)
						{
							std::cout << "Could not open directory: " << std::filesystem::absolute(args[0].toStdString()) << std::endl;
							exit(-2);
						}
					}
				}
			}
		};
		if (auto c = commands.contains(argv[1]))
		{
			c->second();
		}
		else
		{
			printHelp();
		}
	}

	return 0;
}
